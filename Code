class Solution: #beats 11.95% runtime, 99.46% Memory 
    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:
        def canCross(day):
            grid = [[0] * col for _ in range(row)]

            for r, c in cells[:day]:
                grid[r - 1][c - 1] = 1
            
            tiles = []
            for i in range(col):
                if not grid[0][i]:
                    tiles.append((0,i))
                    grid[0][i] = -1
            while len(tiles):
                r,c = tiles.pop(0)
                neighbors = []
                neighbors.append((r,c-1))
                neighbors.append((r-1,c))
                neighbors.append((r+1,c))
                neighbors.append((r,c+1))
                j,k = neighbors.pop(0)
                if 0 <= j < row and 0 <= k < col and grid[j][k] == 0:
                    grid[j][k] = -1
                    if j == row -1:
                        return True
                    tiles = [(j,k)] + tiles
                while(len(neighbors)):
                    j,k = neighbors.pop(0)
                    if 0 <= j < row and 0 <= k < col and grid[j][k] == 0:
                        grid[j][k] = -1
                        if j == row -1:
                            return True
                        tiles.append((j,k))
            return False
        lastDay = 1
        left, right = 1, row*col
        while left < right:
            mid = right - (right - left) // 2
            if canCross(mid):
                left = mid
                lastDay = mid
            else:
                right = mid-1
        return lastDay
